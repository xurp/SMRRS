resource：
1. 虽然报错，但可以启动（一开始启动说找不到类，然后mvn clean并package了，跳过了test）
2. 在配置里删掉了redis密码，但在RedisJedisConfig里，需要把带密码的构造去掉，直接不用密码
3. static放js、css等文件，templates放ftl文件
4. druid-bean.xml似乎是Druid提供的Spring和Jdbc的关联监控,主要配置一个方法名正则匹配拦截配置的路径,拦截dao下面的
5. log4j.properties配置一些东西,logbak-spring.xml也是一个日志框架,配置一些路径,日志级别等
6. mabatis-config.xml,配置项不少,可能最重要的是mapUnderscoreToCamelCase

后台:
1. config包. DruidConfig理论上是读取配置文件里的属性,实际上似乎和网上有些东西有出入. FreeMarkerConfig是配置模板引擎Freemarker的,例如全局标签.
    FtlShiroTagConfig用来把shiro标签写在FreeMarker. RabbitMqConfig除了读取配置文件,还配置了转换器为json(就是发消息的对象,似乎也能自己构造例如stm里的SeckillMessage). 
    RabbitMqPublisherConfig配置交换机之类的东西(和前一个文件可能能合并). RedisCacheConfig读取了配置里的缓存过期时间,做缓存配置和k-v序列化配置. RedisJedisConfig读配置,把池做出来.
    WebMvcConfig一般主要配置拦截器和其他springboot配置,这里做了默认路径跳转至login和跨域配置(和x-springboot的WebMvcConfig一样). ShiroConfig比x-springboot的略复杂些,
          比如remember me 
2. filter包. DruidWebStatFilter用来监控,拦截所有,但一些resource的东西不拦截
3. handler包. DateConverterHandler是一个全局的string转date的转换器,但好像应该在WebMvcConfig注册的,这里没注册. ErrorExceptionHandler是全局异常处理的AOP,
    用@ExceptionHandler({ LoginException.class })一个方法一个方法拦截,然后直接用model返回给前端
4. persistence包. BaseController基类, 注入HttpServletRequest request和一些page处理.
5. rabbitmq包. RabbitMqEnum定义了一些交换机的code和name对应关系, RabbitMqSender用来发送, RabbitMqConsumerEmail和RabbitMqConsumerTip分别对应EMAILNOTIFY和SYSTEMNOTIFY的队列监听.
    上面两个类配合send里的ack,具体可以看https://www.jianshu.com/p/4112d78a8753
6. redis包. JedisUtils取jedisPool,做CRUD.作者认为当然也可以使用spring boot 提供的RedisTemplate工具类
7. rediskey包. KeyPrefix是BasePrefix的接口, 最主要的是给redis key加一个className:prefix的前缀防止重复了
8. servlet包. DruidStatViewServlet是一个druid连接池监控Servlet
9. shiro包. MyUsernamePasswordToken是extends UsernamePasswordToken的,在shiro类基础上加了一个验证码属性. MyShiroRealm是extends AuthorizingRealm的,主要是返回用户信息和权限信息
    和x-springboot的OAuth2Realm一样.ShiroRedisCacheManager似乎是管理shiro redis过期时间的,ShiroRedisSessionDao似乎是redis实现session共享. ShiroRedisCache似乎是redis 实现cache共享
    以上三个类应该是Shiro默认整合了EhCache，来实现缓存，现在用redis替换EhCache来实现缓存,并且实现session由shiro托管.可能的解释大致如下:
           应用如果做负载均衡，集群间session需要共享，如果session没有共享，用户登录系统以后session保存在登录的应用里面，其他应用里面没有session，没有登陆状态，访问会失败。
           下面介绍一个SpringBoot下面基于Shiro的session共享方案--使用Shiro托管应用session,使用Redis管理Shiro缓存
    1)设置项目缓存为Redis，这样Spring项目的缓存就都会存在Redis
    2)设置应用session由Shiro托管
    3)实现Shiro的缓存管理器CacheManger接口，将Spring应用缓存管理器注入shiro缓存管理器，这样shiro的缓存都由Spring处理
    4)实现Shiro的Cache接口，将Spring的缓存工具类注入，使Shiro对缓存信息的存取由Spring的缓存实现
    5)实现Shiro的EnterpriseCacheSessionDAO类，重写Shiro对于session的CRUD，使用重写的Shiro的Cache接口，对session的CRUD在Redis中处理
    反正大致就这个意思. x-springboot里的shiro没用这些,照样OK.不用纠结.
10. tag包. MenuTag手动写menu html,获取用户信息后查询数据库可以显示什么菜单
11. utils包. CodeMsg是封装的错误代码对应信息,PageInfo封装了pageHelp这个工具,RandomValidateCodeUtil手动写验证码,Reflections是一个反射工具类,只在ExportExcel使用.Result统一返回对象
    SpringContextHolder提供静态方法获取ApplicationContext中的所有bean.UserUtil封装一些常用的user查询方法
12. excel包. 暂时没看
13. exception包. 自定义异常类
14. keyutils包. 只有一个类,SysModules extends BasePrefix
15. validator包. IsMobile是注解接口,IsMobileValidator实现ConstraintValidator做具体判断
16. dao包,entity包. 配合三个mapping xml
17. service(Impl)包. user,menu,role的关系
18. web包. 就是controller. BaseErrorController继承spring里的ErrorController,防止在没有抛出异常的情况下出现 Whitelabel Error Page. 剩下的就是中规中矩的

前台:暂略
    








-------作者的介绍---------
项目架构：
	框架: Spring Boot 
	持久层框架 : Mybatis
	数据库连接池: Druid
	分页插件: Pagehelper
	缓存: Redis 
	权限管理: Shiro
	后台数据格式校验: Validation
	模板引擎: Freemarker
	消息中间件: RabbitMQ
	检索引擎: Elasticsearch
	
异步任务：
	针对耗时且不影响结果的操作可以使用异步
	1：在Application中开启异步任务注解 @EnableAsync
	2：在耗时操作的Service中加上注解 @Async
	
定时任务：
	1：在Application中开启定时任务注解@EnableScheduling
	2：在定时操作的Service中加上注解 @Scheduled(cron = "0 0/1 * * * ?")

权限插件（shiro）:
	可以实现应用中用户的权限控制，根据用户具有的权限以及角色，使用页面以及后台注解的方式控制具体按钮的权限
	1、登入认证与权鉴需要重写Realm	
	2、登入的缓存结合redis需要重新cache与session，这里注意存放时存入json格式未成功
	3、重写了UsernamePasswordToken 主要是给登入添加属性
	4、spring boot 中使用 ShiroConfig的方式配置shiro，包括重写的Realm、cache、session等
	
缓存组件（redis）:
	可以将用户增删改查的数据放入缓存中，提升访问速度，减轻服务器压力。本项目还未实现不同用户的cache同步问题，暂时不建议多用
	1、引入spring-boot-starter-data-redis jar包之后，容器中保存的是RedisCacheManager
	2、RedisCacheManager 帮我们创建RedisCache 来作为缓存组件，RedisCache通过操作redis缓存数据
	3、当k-v都是object时是利用序列化保存的，需要RedisConfig来配置序列化方式
	
消息组件（RabbitMQ）:
	多任务并且花费大量时间，但是不需要实时反馈的时候可以使用mq，例如：监控应用中抛出的异常，邮件通知管理员； 注册用户时候，发送激活邮件；
		订单系统和库存系统，用户在下单后发送消息到队列中，库存系统在监听道消息之后进行存储操作；...
	1、RabbitMqConfig配置好连接ConnectionFactory、配置好RabbitTemplate的数据格式转换规则
	2、RabbitMqPublisherConfig配置好交换器Exchange、消息队列Queue、以及交换器与消息队列进行绑定
	3、RabbitMqConsumerTip定义好针对消息队列的监听，不需要关系是谁发的消息，定义好对收到的消息的处理
	4、RabbitMqSender 定义好发送的方法以及发送之后的确认方法
	
检索组件（Elasticsearch）:
	对于需要频繁搜索的数据，比如帖子，订单之类的表在ElasticSearch和Mysql都存一份。这里mysql中可以存储详细信息，es中存储相应的id和检索需要用到的信息，
		然后检索出来之后，再去数据库查询详细数据。也可以将这些数据都存es中，直接查询使用es中的数据。
	一个 ElasticSearch 集群可以 包含多个“索引”，相应的每个索引可以包含多个“类型”。这些不同的类型存储着多个json格式的“文档”，每个文档又有 多个“属性”。 类似Mysql关系：
		索引-数据库       类型-表        文档-表中的记录     属性-列
	spring boot 支持两个集成ES的方式，
		1：Jest方式，利用RestAPI方式，使用的是http协议； 
		2：使用spring data 客户端方式，需要注意Spring Data ElasticSearch必须与ElasticSearch版本相匹配，spring-data-elasticsearch基于tcp协议连接方式
		
	
